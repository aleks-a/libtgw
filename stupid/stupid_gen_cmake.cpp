/* stupid_gen_cmake.c
 *
 * Copyright (C) 2016 aleks-a
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */

#include "stupid_tree.h"

static void write_cmake_files(const stupid_tree_t &tree);

int main(int argc, char **argv)
{
	(void)argv;
	
	if(argc > 2)
	{
		fprintf(stderr, "USAGE %s [dir_path]\n", argv[0]);
	}
	
	stupid_tree_t tree;
	const char *dir = (argc == 2) ? argv[1] : ".";
	
	try
	{
		load_stupid_tree(tree, dir);
		dump_stupid_tree(tree);
		write_cmake_files(tree);
	}
	catch(stupid_exception &e)
	{
		s_err("%s\n", e.what());
		return EXIT_FAILURE;
	}
	catch(std::exception &e)
	{
		s_err("stdexception: %s\n", e.what());
		return EXIT_FAILURE;
	}
	
	return 0;
}

static void write_cmake_file_node(const stupid_tree_t &tree,
	const st_node_t &node);

static void write_cmake_files(const stupid_tree_t &tree)
{
	write_cmake_file_node(tree, tree.root_node);
}


static void write_cmake_file_node(const stupid_tree_t &tree,
	const st_node_t &node)
{
	std::vector<st_node_t>::const_iterator cit;
	std::vector<st_test_t>::const_iterator tit;
	std::string path, tmp;
	
	path = tree.root_path + FSS + node.path + "stupid_build.cmake";
	std::ofstream inc(path.c_str(),
		std::ios_base::out | std::ios_base::trunc);
	printf("Writing cmake: %s\n", path.c_str());
	if( ! inc.good() )
	{
		throw stupid_exception("Failed to open file %s", path.c_str());
	}
	
	path = tree.root_path + FSS + node.path + "stupid_build.cmake";
	
	
	
	
	inc << "# Automatically generated by Stupid" << std::endl << std::endl;
	
	for(tit = node.tests.begin(); tit != node.tests.end(); ++tit)
	{
		if( ! tit->build ) { continue; }
		
		inc << "add_executable(" << tit->name << " "
			<< tit->build_srcs << ")" << std::endl;
		inc << "target_link_libraries(" << tit->name << " "
			<< node.build_libs << " " << tit->build_libs << ")"
			<< std::endl << std::endl;
	}
	
	for(cit = node.children.begin(); cit != node.children.end(); ++cit)
	{
		write_cmake_file_node(tree, *cit);
		if(node.generate_cmakelists || node.generate_subdir_incs)
		{
			inc << "add_subdirectory(" << cit->name << ")" << std::endl << std::endl;
		}
	}
	
	if(node.generate_cmakelists)
	{
		path = tree.root_path + FSS + node.path + "CMakeLists.txt";
		std::ofstream cml(path.c_str(),
			std::ios_base::out | std::ios_base::trunc);
		if( ! cml.good() )
		{
			throw stupid_exception("Failed to open file %s", path.c_str());
		}
		
		cml << "# Automatically generated by Stupid" << std::endl << std::endl;
		cml << "include(stupid_build.cmake)" << std::endl;
	}
}

